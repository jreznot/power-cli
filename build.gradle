plugins {
    id 'java'
}

group 'com.haulmont.demos'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.10

apply plugin: 'application'

mainClassName = 'com.haulmont.demos.powercli.Application'

repositories {
    mavenCentral()
}

dependencies {
    implementation("com.google.guava:guava:26.0-jre") {
        exclude(group: 'com.google.code.findbugs', module: 'jsr305')
    }
}

// Compile module with Gradle

def moduleName = 'com.haulmont.demos.powercli'

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

// Automatic bundling

def bundlePlatform = project.hasProperty('targetOsPlatform') ? '-' + project.property('targetOsPlatform') : '';

def bundlesDir = file("bundles")
def modulesDir = file("${project.buildDir}/modules")
def bundleOutput = file("${buildDir}/bundle" + bundlePlatform)
def installedLibsDir = file("${buildDir}/install/power-cli/lib")
def patchLibsDir = file("${buildDir}/jar-patch")

def modulesConfig = [
        'checker.qual'              : "checker-qual-2.5.2.jar",
        'error.prone.annotations'   : "error_prone_annotations-2.1.3.jar",
        'j2objc.annotations'        : "j2objc-annotations-1.1.jar",
        'animal.sniffer.annotations': "animal-sniffer-annotations-1.14.jar",
        'com.google.common'         : "guava-26.0-jre.jar",
]

task jarPatch(dependsOn: installDist, group: 'build',
        description: 'Patch dependencies with module information') {

    inputs.dir bundlesDir
    outputs.dir patchLibsDir

    inputs.files installDist.outputs.files

    doLast {
        delete patchLibsDir
        delete modulesDir

        modulesDir.mkdirs()

        // Compile module definitions
        copy {
            from installedLibsDir
            into patchLibsDir
        }

        def javaHome = System.getenv('JAVA_HOME')
        if (javaHome == null
                || javaHome.isEmpty()) {
            throw new GradleException('JAVA_HOME is not set')
        }

        for (moduleItem in modulesConfig) {
            def moduleItemName = moduleItem.key
            def moduleItemJar = moduleItem.value

            def jarFile = new File(patchLibsDir, moduleItemJar)
            def compiledModuleDir = new File(modulesDir, moduleItemName)

            // compile module descriptor
            exec {
                workingDir modulesDir

                commandLine(
                        "${javaHome}/bin/javac",
                        '-p', patchLibsDir.absolutePath,
                        '-d', compiledModuleDir.absolutePath,
                        '--patch-module', "${moduleItemName}=${jarFile.absolutePath}",
                        new File(project.file("bundles"), "${moduleItemName}/module-info.java").absolutePath
                )

                standardOutput = System.out
                errorOutput = System.out
            }

            // update JAR
            exec {
                workingDir patchLibsDir

                commandLine(
                        "${javaHome}/bin/jar",
                        'uf',
                        jarFile.absolutePath,
                        '-C',
                        compiledModuleDir.absolutePath,
                        'module-info.class'
                )

                standardOutput = System.out
                errorOutput = System.out
            }
        }
    }
}

task bundle(dependsOn: jarPatch,
        group: 'distribution',
        description: 'Builds bundle with custom JRE') {

    outputs.dir bundleOutput
    inputs.dir patchLibsDir

    ext.appModulePaths = [patchLibsDir]

    doLast {
        delete bundleOutput

        def javaHome = System.getenv('JAVA_HOME')
        if (javaHome == null || javaHome.isEmpty()) {
            throw new GradleException('JAVA_HOME is not set')
        }

        def targetOsJavaHome = project.hasProperty('targetOsJavaHome') ? project.property('targetOsJavaHome') : null
        if (targetOsJavaHome == null || targetOsJavaHome.isEmpty()) {
            targetOsJavaHome = javaHome
        }

        // Call jlink
        exec {
            workingDir buildDir

            commandLine(
                    "${javaHome}/bin/jlink",
                    '--module-path', (["${targetOsJavaHome}/jmods"] + ext.appModulePaths).grep().join(File.pathSeparator),
                    '--add-modules', moduleName,
                    '--output', bundleOutput,
                    '--launcher', "power-cli=$moduleName/$mainClassName",
                    '--compress=2',
                    '--no-header-files',
                    '--no-man-pages'
            )

            standardOutput = System.out
            errorOutput = System.out

            logger.info commandLine.join(' ')
        }

        // fix non-writable files in 'legal/'
        def osName = System.getProperty("os.name").toLowerCase();
        if (osName.contains('nux')
                || osName.contains('mac')) {
            exec {
                executable 'chmod'
                args = ['u+w', '-R', bundleOutput]
            }
        }
    }
}